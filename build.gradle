plugins {
    id 'java'
    id 'checkstyle'
    id 'application'
}

group 'alltimeslucky'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

def webappDir = "$projectDir/webapp"
sourceSets {
    main {
        resources {
            srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
        }
    }
}

dependencies {
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.12.v20180830'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.12.v20180830'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlets', version: '9.4.12.v20180830'
    compile group: 'org.eclipse.jetty', name: 'jetty-webapp', version: '9.4.12.v20180830'
    compile group: 'org.eclipse.jetty', name: 'jetty-rewrite', version: '9.4.12.v20180830'
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-api', version: '9.4.12.v20180830'
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-server', version: '9.4.12.v20180830'
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-servlet', version: '9.4.12.v20180830'
    compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.27'
    compile group: 'org.glassfish.jersey.core', name: 'jersey-server', version: '2.27'
    compile group: 'org.glassfish.jersey.ext', name: 'jersey-proxy-client', version: '2.27'
    compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.27'
    compile group: 'org.glassfish.hk2', name: 'guice-bridge', version: '2.5.0-b62'
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet-core', version: '2.27'
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-jetty-http', version: '2.27'
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '2.27'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.4'
    compile group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: '2.9.4'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
    compile group: 'com.google.inject', name: 'guice', version: '4.2.2'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
}

application {
    mainClassName = "com.alltimeslucky.battletron.server.BattletronServer"
}

jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest {
        attributes 'Main-Class': 'com.alltimeslucky.battletron.server.BattletronServer'
    }
}

checkstyle {
    config = rootProject.resources.text.fromFile('buildConfig/checkstyle/checkstyle.xml')
    toolVersion '8.11'
}

//processResources {
//    dependsOn "buildAngular"
//}

task serveAngular(type: Exec) {
    // installAngular should be run prior to this task
    dependsOn "buildAngular"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    // Add task to the standard build group
    group = BasePlugin.BUILD_GROUP
    // ng doesn't exist as a file in windows -> ng.cmd
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "ng.cmd", "serve"
    } else {
        commandLine "ng", "serve"
    }
}

task buildAngular(type: Exec) {
    // installAngular should be run prior to this task
    dependsOn "installAngular"
    workingDir "$webappDir"
    inputs.dir "$webappDir"

    // Add task to the standard build group
    group = BasePlugin.BUILD_GROUP
    // ng doesn't exist as a file in windows -> ng.cmd
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "ng.cmd", "build"
    } else {
        commandLine "ng", "build"
    }
}

task installAngular(type: Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "install"
    }
}

task buildAll(type: Task) {
    dependsOn "clean"
    dependsOn "buildAngular"
    dependsOn "build"
    group = BasePlugin.BUILD_GROUP
}
